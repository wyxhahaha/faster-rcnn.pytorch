{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"im",
				"imageFile"
			],
			[
				"ana",
				"annotations\tparam"
			],
			[
				"an",
				"annotation\tstatement"
			],
			[
				"ima",
				"imageFile\tstatement"
			],
			[
				"s",
				"showImage"
			],
			[
				"o",
				"open"
			],
			[
				"le",
				"letters\tstatement"
			],
			[
				"txt",
				"txtFile\tstatement"
			],
			[
				"image_",
				"images_list"
			],
			[
				"su",
				"subDir\tstatement"
			],
			[
				"ge",
				"getFileName\tfunction"
			],
			[
				"pr",
				"praseUrl\tfunction"
			],
			[
				"link",
				"link_list"
			],
			[
				"local",
				"localDir\tstatement"
			],
			[
				"fil",
				"file_name\tstatement"
			],
			[
				"is",
				"isdir\tfunction"
			],
			[
				"pa",
				"path\tmodule"
			],
			[
				"ra",
				"ratio_anchors"
			],
			[
				"siz",
				"size_ratios"
			],
			[
				"no",
				"now\tstatement"
			],
			[
				"or",
				"origin\tstatement"
			],
			[
				"loss",
				"loss\tstatement"
			],
			[
				"num",
				"num_classes"
			],
			[
				"ran",
				"randn"
			],
			[
				"nu",
				"num_train\tstatement"
			],
			[
				"enu",
				"\\end{enumerate}                                   \tlatex-document"
			],
			[
				"foot",
				"\\footnote{text}                                   \tlatex-document"
			],
			[
				"dot",
				"\\dots                                             \ttex"
			],
			[
				"time",
				"\\times                                            \tlatex-mathsymbols"
			],
			[
				"math",
				"\\mathds{text}                                     \tlatex-document"
			],
			[
				"maht",
				"\\mathbf{text}                                     \tlatex-document"
			],
			[
				"mathb",
				"\\mathbf{text}                                     \tlatex-document"
			],
			[
				"cite",
				"\\cite{keylist}                                    \tlatex-document"
			],
			[
				"cap",
				"\\caption{title}                                   \tlatex-document"
			],
			[
				"ver",
				"\\vert                                             \tlatex-mathsymbols"
			],
			[
				"da",
				"dataset_dir\tparam"
			],
			[
				"rem",
				"rmtree\tfunction"
			],
			[
				"sy",
				"system\tfunction"
			],
			[
				"datase",
				"dataset_dir"
			],
			[
				"file",
				"file_path\tstatement"
			],
			[
				"prev_",
				"prev_h"
			],
			[
				"pre",
				"prev_h"
			],
			[
				"nex",
				"next_h"
			],
			[
				"W_",
				"W_vocab"
			],
			[
				"ini",
				"initial_hidden_state"
			],
			[
				"em",
				"embedded_captions"
			],
			[
				"cel",
				"cell_type"
			],
			[
				"fe",
				"features"
			],
			[
				"x_",
				"x_t"
			],
			[
				"bat",
				"batchnorm_forward"
			],
			[
				"pad",
				"padded_x"
			],
			[
				"out_",
				"out_H"
			],
			[
				"cons",
				"Constant"
			],
			[
				"ep",
				"epsilon"
			],
			[
				"lear",
				"learning_rate"
			],
			[
				"dec",
				"decay_rate"
			],
			[
				"lea",
				"learning_rate"
			],
			[
				"i",
				"i"
			],
			[
				"De",
				"DEBUG"
			],
			[
				"set",
				"set_trace"
			],
			[
				"x",
				"x_tmp"
			],
			[
				"re",
				"reg"
			],
			[
				"grad",
				"grads"
			],
			[
				"fc_",
				"fc2_act"
			],
			[
				"hi",
				"hidden"
			],
			[
				"inp",
				"input_dim"
			],
			[
				"weigh",
				"weight_scale"
			],
			[
				"do",
				"dout"
			],
			[
				"wor",
				"word"
			],
			[
				"ke",
				"KeyError"
			],
			[
				"Ec",
				"except"
			],
			[
				"wr",
				"word2vec"
			],
			[
				"tr",
				"train"
			],
			[
				"get",
				"getData"
			],
			[
				"c",
				"count"
			],
			[
				"word",
				"words"
			],
			[
				"w",
				"write"
			],
			[
				"Ex",
				"except"
			],
			[
				"I",
				"IsConnected_new"
			],
			[
				"GE",
				"GetConnectedState"
			],
			[
				"my",
				"myaddr"
			],
			[
				"f",
				"False"
			],
			[
				"sed",
				"sendmail"
			],
			[
				"lo",
				"Login"
			],
			[
				"se",
				"server"
			],
			[
				"sm",
				"smtp_server"
			],
			[
				"fr",
				"from_addr"
			],
			[
				"test",
				"testSet"
			],
			[
				"train",
				"trainSet"
			],
			[
				"B",
				"BasicModule"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# --------------------------------------------------------\n# Pytorch multi-GPU Faster R-CNN\n# Licensed under The MIT License [see LICENSE for details]\n# Written by Jiasen Lu, Jianwei Yang, based on code from Ross Girshick\n# --------------------------------------------------------\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport _init_paths\nimport os\nimport sys\nimport numpy as np\nimport argparse\nimport pprint\nimport pdb\nimport time\n\nimport torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.optim as optim\n\nimport torchvision.transforms as transforms\nfrom torch.utils.data.sampler import Sampler\n\nfrom roi_data_layer.roidb import combined_roidb\nfrom roi_data_layer.roibatchLoader import roibatchLoader\nfrom model.utils.config import cfg, cfg_from_file, cfg_from_list, get_output_dir\nfrom model.utils.net_utils import weights_normal_init, save_net, load_net, \\\n      adjust_learning_rate, save_checkpoint, clip_gradient\n\nfrom model.faster_rcnn.vgg16 import vgg16\nfrom model.faster_rcnn.resnet import resnet\n\ndef parse_args():\n  \"\"\"\n  Parse input arguments\n  \"\"\"\n  parser = argparse.ArgumentParser(description='Train a Fast R-CNN network')\n  parser.add_argument('--dataset', dest='dataset',\n                      help='training dataset',\n                      default='pascal_voc', type=str)\n  parser.add_argument('--net', dest='net',\n                    help='vgg16, res101',\n                    default='vgg16', type=str)\n  parser.add_argument('--start_epoch', dest='start_epoch',\n                      help='starting epoch',\n                      default=1, type=int)\n  parser.add_argument('--epochs', dest='max_epochs',\n                      help='number of epochs to train',\n                      default=20, type=int)\n  parser.add_argument('--disp_interval', dest='disp_interval',\n                      help='number of iterations to display',\n                      default=100, type=int)\n  parser.add_argument('--checkpoint_interval', dest='checkpoint_interval',\n                      help='number of iterations to display',\n                      default=10000, type=int)\n\n  parser.add_argument('--save_dir', dest='save_dir',\n                      help='directory to save models', default=\"/srv/share/jyang375/models\",\n                      nargs=argparse.REMAINDER)\n  parser.add_argument('--nw', dest='num_workers',\n                      help='number of worker to load data',\n                      default=0, type=int)\n  parser.add_argument('--cuda', dest='cuda',\n                      help='whether use CUDA',\n                      action='store_true')\n  parser.add_argument('--ls', dest='large_scale',\n                      help='whether use large imag scale',\n                      action='store_true')                      \n  parser.add_argument('--mGPUs', dest='mGPUs',\n                      help='whether use multiple GPUs',\n                      action='store_true')\n  parser.add_argument('--bs', dest='batch_size',\n                      help='batch_size',\n                      default=1, type=int)\n  parser.add_argument('--cag', dest='class_agnostic',\n                      help='whether perform class_agnostic bbox regression',\n                      action='store_true')\n\n# config optimization\n  parser.add_argument('--o', dest='optimizer',\n                      help='training optimizer',\n                      default=\"sgd\", type=str)\n  parser.add_argument('--lr', dest='lr',\n                      help='starting learning rate',\n                      default=0.001, type=float)\n  parser.add_argument('--lr_decay_step', dest='lr_decay_step',\n                      help='step to do learning rate decay, unit is epoch',\n                      default=5, type=int)\n  parser.add_argument('--lr_decay_gamma', dest='lr_decay_gamma',\n                      help='learning rate decay ratio',\n                      default=0.1, type=float)\n\n# set training session\n  parser.add_argument('--s', dest='session',\n                      help='training session',\n                      default=1, type=int)\n\n# resume trained model\n  parser.add_argument('--r', dest='resume',\n                      help='resume checkpoint or not',\n                      default=False, type=bool)\n  parser.add_argument('--checksession', dest='checksession',\n                      help='checksession to load model',\n                      default=1, type=int)\n  parser.add_argument('--checkepoch', dest='checkepoch',\n                      help='checkepoch to load model',\n                      default=1, type=int)\n  parser.add_argument('--checkpoint', dest='checkpoint',\n                      help='checkpoint to load model',\n                      default=0, type=int)\n# log and diaplay\n  parser.add_argument('--use_tfboard', dest='use_tfboard',\n                      help='whether use tensorflow tensorboard',\n                      default=False, type=bool)\n\n  args = parser.parse_args()\n  return args\n\n\nclass sampler(Sampler):\n  def __init__(self, train_size, batch_size):\n    self.num_data = train_size\n    self.num_per_batch = int(train_size / batch_size)\n    self.batch_size = batch_size\n    self.range = torch.arange(0,batch_size).view(1, batch_size).long()\n    self.leftover_flag = False\n    if train_size % batch_size:\n      self.leftover = torch.arange(self.num_per_batch*batch_size, train_size).long()\n      self.leftover_flag = True\n\n  def __iter__(self):\n    rand_num = torch.randperm(self.num_per_batch).view(-1,1) * self.batch_size\n    self.rand_num = rand_num.expand(self.num_per_batch, self.batch_size) + self.range\n\n    self.rand_num_view = self.rand_num.view(-1)\n\n    if self.leftover_flag:\n      self.rand_num_view = torch.cat((self.rand_num_view, self.leftover),0)\n\n    return iter(self.rand_num_view)\n\n  def __len__(self):\n    return self.num_data\n\nif __name__ == '__main__':\n\n  args = parse_args()\n\n  print('Called with args:')\n  print(args)\n\n  if args.use_tfboard:\n    from model.utils.logger import Logger\n    # Set the logger\n    logger = Logger('./logs')\n\n  if args.dataset == \"pascal_voc\":\n      args.imdb_name = \"voc_2007_trainval\"\n      args.imdbval_name = \"voc_2007_test\"\n      args.set_cfgs = ['ANCHOR_SCALES', '[8, 16, 32]', 'ANCHOR_RATIOS', '[0.5,1,2]', 'MAX_NUM_GT_BOXES', '20']\n  elif args.dataset == \"pascal_voc_0712\":\n      args.imdb_name = \"voc_2007_trainval+voc_2012_trainval\"\n      args.imdbval_name = \"voc_2007_test\"\n      args.set_cfgs = ['ANCHOR_SCALES', '[8, 16, 32]', 'ANCHOR_RATIOS', '[0.5,1,2]', 'MAX_NUM_GT_BOXES', '20']\n  elif args.dataset == \"coco\":\n      args.imdb_name = \"coco_2014_train+coco_2014_valminusminival\"\n      args.imdbval_name = \"coco_2014_minival\"\n      args.set_cfgs = ['ANCHOR_SCALES', '[4, 8, 16, 32]', 'ANCHOR_RATIOS', '[0.5,1,2]', 'MAX_NUM_GT_BOXES', '50']\n  elif args.dataset == \"imagenet\":\n      args.imdb_name = \"imagenet_train\"\n      args.imdbval_name = \"imagenet_val\"\n      args.set_cfgs = ['ANCHOR_SCALES', '[4, 8, 16, 32]', 'ANCHOR_RATIOS', '[0.5,1,2]', 'MAX_NUM_GT_BOXES', '30']\n  elif args.dataset == \"vg\":\n      # train sizes: train, smalltrain, minitrain\n      # train scale: ['150-50-20', '150-50-50', '500-150-80', '750-250-150', '1750-700-450', '1600-400-20']\n      args.imdb_name = \"vg_150-50-50_minitrain\"\n      args.imdbval_name = \"vg_150-50-50_minival\"\n      args.set_cfgs = ['ANCHOR_SCALES', '[4, 8, 16, 32]', 'ANCHOR_RATIOS', '[0.5,1,2]', 'MAX_NUM_GT_BOXES', '50']\n\n  args.cfg_file = \"cfgs/{}_ls.yml\".format(args.net) if args.large_scale else \"cfgs/{}.yml\".format(args.net)\n\n  if args.cfg_file is not None:\n    cfg_from_file(args.cfg_file)\n  if args.set_cfgs is not None:\n    cfg_from_list(args.set_cfgs)\n\n  print('Using config:')\n  pprint.pprint(cfg)\n  np.random.seed(cfg.RNG_SEED)\n\n  #torch.backends.cudnn.benchmark = True\n  if torch.cuda.is_available() and not args.cuda:\n    print(\"WARNING: You have a CUDA device, so you should probably run with --cuda\")\n\n  # train set\n  # -- Note: Use validation set and disable the flipped to enable faster loading.\n  cfg.TRAIN.USE_FLIPPED = True\n  cfg.USE_GPU_NMS = args.cuda\n  imdb, roidb, ratio_list, ratio_index = combined_roidb(args.imdb_name)\n  train_size = len(roidb)\n\n  print('{:d} roidb entries'.format(len(roidb)))\n\n  output_dir = args.save_dir + \"/\" + args.net + \"/\" + args.dataset\n  if not os.path.exists(output_dir):\n    os.makedirs(output_dir)\n\n  sampler_batch = sampler(train_size, args.batch_size)\n\n  dataset = roibatchLoader(roidb, ratio_list, ratio_index, args.batch_size, \\\n                           imdb.num_classes, training=True)\n\n  dataloader = torch.utils.data.DataLoader(dataset, batch_size=args.batch_size,\n                            sampler=sampler_batch, num_workers=args.num_workers)\n\n  # initilize the tensor holder here.\n  im_data = torch.FloatTensor(1)\n  im_info = torch.FloatTensor(1)\n  num_boxes = torch.LongTensor(1)\n  gt_boxes = torch.FloatTensor(1)\n\n\n  # ship to cuda\n  if args.cuda:\n    im_data = im_data.cuda()\n    im_info = im_info.cuda()\n    num_boxes = num_boxes.cuda()\n    gt_boxes = gt_boxes.cuda()\n\n  # make variable\n  im_data = Variable(im_data)\n  im_info = Variable(im_info)\n  num_boxes = Variable(num_boxes)\n  gt_boxes = Variable(gt_boxes)\n\n  if args.cuda:\n    cfg.CUDA = True\n\n  # initilize the network here.\n  if args.net == 'vgg16':\n    fasterRCNN = vgg16(imdb.classes, pretrained=True, class_agnostic=args.class_agnostic)\n  elif args.net == 'res101':\n    fasterRCNN = resnet(imdb.classes, 101, pretrained=True, class_agnostic=args.class_agnostic)\n  elif args.net == 'res50':\n    fasterRCNN = resnet(imdb.classes, 50, pretrained=True, class_agnostic=args.class_agnostic)\n  elif args.net == 'res152':\n    fasterRCNN = resnet(imdb.classes, 152, pretrained=True, class_agnostic=args.class_agnostic)\n  else:\n    print(\"network is not defined\")\n    pdb.set_trace()\n\n  fasterRCNN.create_architecture()\n\n  lr = cfg.TRAIN.LEARNING_RATE\n  lr = args.lr\n  #tr_momentum = cfg.TRAIN.MOMENTUM\n  #tr_momentum = args.momentum\n\n  params = []\n  for key, value in dict(fasterRCNN.named_parameters()).items():\n    if value.requires_grad:\n      if 'bias' in key:\n        params += [{'params':[value],'lr':lr*(cfg.TRAIN.DOUBLE_BIAS + 1), \\\n                'weight_decay': cfg.TRAIN.BIAS_DECAY and cfg.TRAIN.WEIGHT_DECAY or 0}]\n      else:\n        params += [{'params':[value],'lr':lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]\n\n  if args.optimizer == \"adam\":\n    lr = lr * 0.1\n    optimizer = torch.optim.Adam(params)\n\n  elif args.optimizer == \"sgd\":\n    optimizer = torch.optim.SGD(params, momentum=cfg.TRAIN.MOMENTUM)\n\n  if args.resume:\n    load_name = os.path.join(output_dir,\n      'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))\n    print(\"loading checkpoint %s\" % (load_name))\n    checkpoint = torch.load(load_name)\n    args.session = checkpoint['session']\n    args.start_epoch = checkpoint['epoch']\n    fasterRCNN.load_state_dict(checkpoint['model'])\n    optimizer.load_state_dict(checkpoint['optimizer'])\n    lr = optimizer.param_groups[0]['lr']\n    if 'pooling_mode' in checkpoint.keys():\n      cfg.POOLING_MODE = checkpoint['pooling_mode']\n    print(\"loaded checkpoint %s\" % (load_name))\n\n  if args.mGPUs:\n    fasterRCNN = nn.DataParallel(fasterRCNN)\n\n  if args.cuda:\n    fasterRCNN.cuda()\n\n  iters_per_epoch = int(train_size / args.batch_size)\n\n  for epoch in range(args.start_epoch, args.max_epochs):\n    # setting to train mode\n    fasterRCNN.train()\n    loss_temp = 0\n    start = time.time()\n\n    if epoch % (args.lr_decay_step + 1) == 0:\n        adjust_learning_rate(optimizer, args.lr_decay_gamma)\n        lr *= args.lr_decay_gamma\n\n    data_iter = iter(dataloader)\n    for step in range(iters_per_epoch):\n      data = next(data_iter)\n      im_data.data.resize_(data[0].size()).copy_(data[0])\n      im_info.data.resize_(data[1].size()).copy_(data[1])\n      gt_boxes.data.resize_(data[2].size()).copy_(data[2])\n      num_boxes.data.resize_(data[3].size()).copy_(data[3])\n\n      fasterRCNN.zero_grad()\n      rois, cls_prob, bbox_pred, \\\n      rpn_loss_cls, rpn_loss_box, \\\n      RCNN_loss_cls, RCNN_loss_bbox, \\\n      rois_label = fasterRCNN(im_data, im_info, gt_boxes, num_boxes)\n\n      loss = rpn_loss_cls.mean() + rpn_loss_box.mean() \\\n           + RCNN_loss_cls.mean() + RCNN_loss_bbox.mean()\n      loss_temp += loss.data[0]\n\n      # backward\n      optimizer.zero_grad()\n      loss.backward()\n      if args.net == \"vgg16\":\n          clip_gradient(fasterRCNN, 10.)\n      optimizer.step()\n\n      if step % args.disp_interval == 0:\n        end = time.time()\n        if step > 0:\n          loss_temp /= args.disp_interval\n\n        if args.mGPUs:\n          loss_rpn_cls = rpn_loss_cls.mean().data[0]\n          loss_rpn_box = rpn_loss_box.mean().data[0]\n          loss_rcnn_cls = RCNN_loss_cls.mean().data[0]\n          loss_rcnn_box = RCNN_loss_bbox.mean().data[0]\n          fg_cnt = torch.sum(rois_label.data.ne(0))\n          bg_cnt = rois_label.data.numel() - fg_cnt\n        else:\n          loss_rpn_cls = rpn_loss_cls.data[0]\n          loss_rpn_box = rpn_loss_box.data[0]\n          loss_rcnn_cls = RCNN_loss_cls.data[0]\n          loss_rcnn_box = RCNN_loss_bbox.data[0]\n          fg_cnt = torch.sum(rois_label.data.ne(0))\n          bg_cnt = rois_label.data.numel() - fg_cnt\n\n        print(\"[session %d][epoch %2d][iter %4d/%4d] loss: %.4f, lr: %.2e\" \\\n                                % (args.session, epoch, step, iters_per_epoch, loss_temp, lr))\n        print(\"\\t\\t\\tfg/bg=(%d/%d), time cost: %f\" % (fg_cnt, bg_cnt, end-start))\n        print(\"\\t\\t\\trpn_cls: %.4f, rpn_box: %.4f, rcnn_cls: %.4f, rcnn_box %.4f\" \\\n                      % (loss_rpn_cls, loss_rpn_box, loss_rcnn_cls, loss_rcnn_box))\n        if args.use_tfboard:\n          info = {\n            'loss': loss_temp,\n            'loss_rpn_cls': loss_rpn_cls,\n            'loss_rpn_box': loss_rpn_box,\n            'loss_rcnn_cls': loss_rcnn_cls,\n            'loss_rcnn_box': loss_rcnn_box\n          }\n          for tag, value in info.items():\n            logger.scalar_summary(tag, value, step)\n\n        loss_temp = 0\n        start = time.time()\n\n    if args.mGPUs:\n      save_name = os.path.join(output_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.session, epoch, step))\n      save_checkpoint({\n        'session': args.session,\n        'epoch': epoch + 1,\n        'model': fasterRCNN.module.state_dict(),\n        'optimizer': optimizer.state_dict(),\n        'pooling_mode': cfg.POOLING_MODE,\n        'class_agnostic': args.class_agnostic,\n      }, save_name)\n    else:\n      save_name = os.path.join(output_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.session, epoch, step))\n      save_checkpoint({\n        'session': args.session,\n        'epoch': epoch + 1,\n        'model': fasterRCNN.state_dict(),\n        'optimizer': optimizer.state_dict(),\n        'pooling_mode': cfg.POOLING_MODE,\n        'class_agnostic': args.class_agnostic,\n      }, save_name)\n    print('save model: {}'.format(save_name))\n\n    end = time.time()\n    print(end - start)\n",
			"file": "trainval_net.py",
			"file_size": 15391,
			"file_write_time": 131654835447342171,
			"settings":
			{
				"buffer_size": 14994,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/envs_anaconda.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 302.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"latex",
				"LaTeXTools: View PDF"
			],
			[
				"latexTools vie",
				"LaTeXTools: View PDF"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Install Package Control"
			],
			[
				"install",
				"Install Package Control"
			],
			[
				"remove",
				"Package Control: Remove Package"
			]
		],
		"width": 412.0
	},
	"console":
	{
		"height": 858.0,
		"history":
		[
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 9510))",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"mport urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/myFile/faster-rcnn.pytorch"
	],
	"file_history":
	[
		"/C/myFile/faster-rcnn.pytorch/lib/roi_data_layer/roidb.py",
		"/C/myFile/faster-rcnn.pytorch/lib/datasets/factory.py",
		"/C/myFile/faster-rcnn.pytorch/lib/datasets/coco.py",
		"/C/myFile/faster-rcnn.pytorch/lib/roi_data_layer/roibatchLoader.py",
		"/C/myFile/faster-rcnn/cfgs/res101_ls.yml",
		"/C/myFile/faster-rcnn/lib/model/utils/config.py",
		"/C/myFile/faster-rcnn/trainval_net.py",
		"/C/myFile/faster-rcnn/lib/datasets/icpr.py",
		"/C/myFile/faster-rcnn.pytorch/trainval_net.py",
		"/C/myFile/faster-rcnn.pytorch/_init_paths.py",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/Anaconda/anaconda_server/jsonserver.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/roi_data_layer/minibatch.py",
		"/E/git_clone/faster_rcnn_pytorch/train.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/datasets/imdb.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/roi_data_layer/layer.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/utils/blob.py",
		"/E/git_clone/faster_rcnn_pytorch/README.md",
		"/C/myFile/faster-rcnn.pytorch/lib/model/faster_rcnn/faster_rcnn.py",
		"/D/competion/ICPR/dataSet/readData.py",
		"/D/Code_lib/ICPR/dataSet/readData.py",
		"/D/Code_lib/ICPR/readData.py",
		"/E/git_clone/pytorch-fcn/torchfcn/models/fcn16s.py",
		"/E/git_clone/pytorch-fcn/torchfcn/trainer.py",
		"/E/git_clone/pytorch-fcn/examples/voc/train_fcn16s.py",
		"/D/Code/python_scripts/downloadpapers.py",
		"/D/Paper/edit_subject.py",
		"/D/Paper/downloadpapers.py",
		"/E/git_clone/recurrent-visual-attention/data_loader.py",
		"/E/git_clone/draw_pytorch/draw_model.py",
		"/E/Code_temp/test_code/test.py",
		"/D/Code/python/downloadpapers.py",
		"/D/Code_lib/LeetCode/prob3. Longest Substring Without Repeating Characters.py",
		"/E/git_clone/recurrent-visual-attention/config.py",
		"/C/Program1/v2ray-v3.10-windows-64/config.json",
		"/C/Program1/ssR/gui-config.json",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/Anaconda/anaconda_lib/worker.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/faster_rcnn.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/proposal_target_layer.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/anchor_target_layer.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/generate.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/proposal_layer.py",
		"/C/Users/chmtt/Desktop/generate_anchors.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/network.py",
		"/C/Users/chmtt/Desktop/test.py",
		"/D/Code_lib/LeetCode/prob3. Longest Substring Without Repeating Characters",
		"/D/Code_lib/LeetCode/prob_1_2sum.py",
		"/E/Code_lib/CS231n/assignment1/cs231n/classifiers/linear_classifier.py",
		"/D/Code_lib/LeetCode/prob_2_Add2Numbers.py",
		"/D/Code_lib/LeetCode/prob7_reverseNumber.py",
		"/E/Code_lib/ML_algorithm/classifiers/logit.py",
		"/D/Code_lib/matlabfile/CalcSpotRadius.m",
		"/D/Code_lib/matlabfile/CalcRadiusRecord.m",
		"/C/Users/chmtt/Downloads/IEEEtran/1.tex",
		"/C/myFile/SJTU/Coursera/ConvexOptimization/project/report/bare_jrnl_comsoc.tex",
		"/C/myFile/SJTU/Coursera/ConvexOptimization/project/IEEEtran/convex_report.tex",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/User/LaTeXTools.sublime-settings",
		"/C/Users/chmtt/AppData/Local/Sublime Text 3/Cache/LaTeXTools/internal/preview_math/ce596f8c2a2a74f59749f682440c4dbe.png.err",
		"/C/myFile/SJTU/Coursera/ConvexOptimization/project/IEEEtran/conference_071817.bbl",
		"/C/Users/chmtt/Downloads/conference_071817.tex",
		"/C/myFile/SJTU/Coursera/ConvexOptimization/project/IEEEtran/conference_071817.tex",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/E/git_clone/draw/draw.py",
		"/E/git_clone/pytorch-fcn/torchfcn/models/vgg.py",
		"/E/git_clone/pytorch-fcn/setup.py",
		"/E/git_clone/pytorch-fcn/torchfcn/ext/fcn.berkeleyvision.org/voc-fcn32s/net.py",
		"/C/Users/chmtt/AppData/Local/Temp/scp57625/extdisks/sda2/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/generate.py",
		"/C/Users/chmtt/AppData/Local/Temp/scp58119/extdisks/sda2/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/generate_anchors.py",
		"/E/Code_lib/ML_algorithm/linearModel/logit.py",
		"/C/Users/chmtt/AppData/Local/Temp/scp48278/extdisks/sda2/git_clone/faster_rcnn_pytorch/faster_rcnn/faster_rcnn.py",
		"/C/Users/chmtt/AppData/Local/Temp/scp56531/extdisks/sda2/git_clone/faster_rcnn_pytorch/faster_rcnn/rpn_msr/anchor_target_layer.py",
		"//192.168.31.1/XiaoMi-usb1/Code_lib/ML_algorithm/model/logit.py",
		"/E/Code_lib/CS231n/assignment1/cs231n/classifiers/k_nearest_neighbor.py",
		"/E/Code_lib/ML_algorithm/data/download_mnist.py",
		"/E/Code_lib/CS231n/assignment1/cs231n/classifiers/__init__.py",
		"/E/Code_lib/ML_algorithm/README.md",
		"/E/Code_temp/test_code/urlretrieve.py",
		"/E/Code_temp/test_code/新建文本文档.txt",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/User/envs_anaconda.sublime-build",
		"/C/Users/chmtt/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/E/git_clone/wechat_jump_game/config/1920x1080/config.json",
		"/E/down/BreachCompilation/data/0/0",
		"/E/down/BreachCompilation/data/0/l",
		"/E/git_clone/pytorch-faster-rcnn/lib/model/train_val.py",
		"/E/git_clone/pytorch-faster-rcnn/lib/model/bbox_transform.py",
		"/E/git_clone/pytorch-faster-rcnn/tools/trainval_net.py",
		"/E/down/BreachCompilation/README",
		"/E/git_clone/pytorch-faster-rcnn/lib/datasets/factory.py",
		"/E/git_clone/pytorch-faster-rcnn/lib/datasets/pascal_voc.py",
		"/E/git_clone/pytorch-faster-rcnn/lib/datasets/ds_utils.py",
		"/E/git_clone/pytorch-faster-rcnn/lib/nets/vgg16.py",
		"/E/Code_temp/test_code/MSER.py",
		"/E/git_clone/Faster-RCNN_TF/tools/train_net.py",
		"/E/git_clone/Faster-RCNN_TF/lib/networks/VGGnet_train.py",
		"/E/git_clone/Faster-RCNN_TF/experiments/scripts/faster_rcnn_end2end.sh",
		"/E/git_clone/Faster-RCNN_TF/lib/fast_rcnn/train.py",
		"/E/git_clone/Faster-RCNN_TF/lib/fast_rcnn/test.py",
		"/E/git_clone/Faster-RCNN_TF/lib/fast_rcnn/config.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/roi_pooling/modules/roi_pool_py.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/roi_pooling/modules/roi_pool.py",
		"/E/Code_lib/deep_learning/VAE/vae.py",
		"/E/git_clone/faster_rcnn_pytorch/faster_rcnn/vgg16.py",
		"/E/git_clone/schema-games/schema_games/breakout/play.py",
		"/E/git_clone/schema-games/schema_games/breakout/core.py",
		"/E/git_clone/schema-games/schema_games/breakout/objects.py",
		"/E/git_clone/schema-games/schema_games/breakout/games.py",
		"/E/git_clone/schema-games/schema_games/breakout/events.py",
		"/C/Code_temp/image_caption/caption/model.py",
		"/E/git_clone/schema-games/schema_games/breakout/constants.py",
		"/E/git_clone/schema-games/setup.py",
		"/E/git_clone/schema-games/schema_games/printing.py",
		"/C/Code_temp/image_caption/CS231n-2017/assignment3/cs231n/rnn_layers.py",
		"/C/Code_temp/image_caption/CS231n-2017/assignment3/cs231n/classifiers/rnn.py",
		"/C/Code_temp/image_caption/vanillaRNN/model.py",
		"/C/Code_temp/image_caption/vanillaRNN/solver.py",
		"/C/Users/chmtt/Desktop/CS231n/CS231n-2017/assignment3/cs231n/classifiers/rnn.py",
		"/C/Users/chmtt/Desktop/CS231n/CS231n-2017/assignment3/cs231n/rnn_layers.py",
		"/C/Code_temp/image_caption/vanillaRNN/rnn.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment3/cs231n/rnn_layers.py",
		"/C/Users/chmtt/Desktop/CS231n/CS231n-2017/assignment3/cs231n/classifiers/squeezenet.py",
		"/C/Code_temp/image_caption/vanillaRNN/rnn_layers.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment3/cs231n/image_utils.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment3/cs231n/layers.py",
		"/C/Users/chmtt/Desktop/CS231n/CS231n-2017/assignment2/cs231n/optim.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment2/cs231n/optim.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment2/cs231n/classifiers/fc_net.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment2/cs231n/layers.py",
		"/C/Users/chmtt/Desktop/CS231n/2017_spring/assignment2/cs231n/fast_layers.py"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"cfg",
			"-->",
			"Hartigan",
			"label",
			"lable",
			"'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "trainval_net.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14994,
						"regions":
						{
						},
						"selection":
						[
							[
								719,
								719
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 828.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 223.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 124.0
	},
	"pinned_build_system": "Packages/User/envs_anaconda.sublime-build",
	"project": "faster-rcnn.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 170.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"download"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 188.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
